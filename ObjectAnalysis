import re


class ObjectAnalysis:

    def __init__(self, obj):
        self.obj = obj
        self.pattern = re.compile('__(.*)__')
        self.class_of_object = self.obj.__class__  # This is the class of the object

    # Checking: is object callable
    is_callable = lambda _object, attr: callable(getattr(_object, '%s' % attr))

    # Returns all object methods
    def get_all_object_methods(self):

        methods = []

        for attr in dir(self.obj):

            if ObjectAnalysis.is_callable(self.obj, attr):
                if not re.match(self.pattern, str(attr)):
                    methods.append(attr)

        return methods

    #  Returns all object attrs
    def get_all_object_attrs(self):

        return dir(self.obj)

    # Returns all callable attrs
    def get_all_callable_attrs(self):

        callable_attrs = []

        for attr in dir(self.obj):
            if ObjectAnalysis.is_callable(self.obj, attr):
              callable_attrs.append(attr)

        return callable_attrs

    def display_docs_of_class(self):
        help(self.obj.__class__)


class IsObjectAbleAnalysis:

    def __init__(self, obj):
        self.obj = obj

    def is_iterable(self):
        return hasattr(self.obj, '__iter__')

    def is_indexable(self):
        return hasattr(self.obj, '__getitem__')


class UniversalAnalysis:

    def __init__(self, obj):
        self.Able = IsObjectAbleAnalysis(obj)
        self.object_analysis = ObjectAnalysis(obj)

    def __getattr__(self, item):
        try:
            result = getattr(self.Able, item)
            return result
        except AttributeError:
            result = getattr(self.object_analysis, item)
            return result


def the_most_important_info_of_object(obj):
    testing_obj = UniversalAnalysis(obj)
    print('_-'*50, '\n')
    print('The object to be analyzed: {}'.format(obj),
          '\nThe class of the object: %s' % testing_obj.class_of_object,
          '\nIs indexable: %s' % testing_obj.is_indexable(),
          '\nIs iterable: %s' % testing_obj.is_iterable(),
          ''

          )
    print('\n', '_-'*50)
